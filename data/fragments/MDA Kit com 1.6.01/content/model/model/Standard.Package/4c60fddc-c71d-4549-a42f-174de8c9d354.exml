<?xml version="1.0" ?>
<!--GENERATED FILE, PLEASE DO NOT EDIT!!!--><EXT object="visitors" version="4">
  <OBJECT>
    <ID name="visitors" mc="Standard.Package" uid="4c60fddc-c71d-4549-a42f-174de8c9d354"/>
    <PID name="Infrastructure" mc="Standard.Component" uid="4c769656-439f-4238-bb8a-0f5218037963"/>
    <ATTRIBUTES>
      <ATT name="IsInstantiable">false</ATT>
      <ATT name="IsAbstract">false</ATT>
      <ATT name="IsLeaf">false</ATT>
      <ATT name="IsRoot">false</ATT>
      <ATT name="Visibility">Public</ATT>
      <ATT name="Name"><![CDATA[visitors]]></ATT>
      <ATT name="status">1970354901745664</ATT>
    </ATTRIBUTES>
    <DEPENDENCIES>
      <COMP relation="OwnedElement">
        <OBJECT>
          <ID name="InfrastructureVisitor" mc="Standard.Collaboration" uid="a7b62e47-7e7b-44d7-9f84-4c1357de7910"/>
          <ATTRIBUTES>
            <ATT name="IsConcurrent">false</ATT>
            <ATT name="IsAbstract">false</ATT>
            <ATT name="IsLeaf">false</ATT>
            <ATT name="IsRoot">false</ATT>
            <ATT name="Visibility">Public</ATT>
            <ATT name="Name"><![CDATA[InfrastructureVisitor]]></ATT>
            <ATT name="status">0</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <COMP relation="OwnedPackageImport">
              <OBJECT>
                <ID name="" mc="Standard.PackageImport" uid="197f401e-fa95-47b9-a406-d7f847e27ba3"/>
                <ATTRIBUTES>
                  <ATT name="Visibility">Private</ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">0</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="ImportedPackage">
                    <ID name="infrastructure" mc="Standard.Package" uid="00d00f24-0000-0001-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Standard.PackageImport" uid="84293de2-f233-49fb-ac01-b97c592122df"/>
                <ATTRIBUTES>
                  <ATT name="Visibility">Private</ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">0</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="ImportedPackage">
                    <ID name="mda" mc="Standard.Package" uid="0148033c-0000-00aa-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Standard.PackageImport" uid="7ab4fca4-543e-4340-8ac7-b1047c5204e5"/>
                <ATTRIBUTES>
                  <ATT name="Visibility">Private</ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">0</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="ImportedPackage">
                    <ID name="diagrams" mc="Standard.Package" uid="9972141f-58b9-48fc-bd9d-e69b3214f2b8"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Standard.PackageImport" uid="39acb546-6089-4b6a-89aa-23266fa86f93"/>
                <ATTRIBUTES>
                  <ATT name="Visibility">Private</ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">0</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="ImportedPackage">
                    <ID name="impact" mc="Standard.Package" uid="0b8c0701-66bc-4886-8e4e-31b1b8e65822"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
            </COMP>
            <LINK relation="Extension">
              <FOREIGNID name="Visitor" mc="Infrastructure.Stereotype" uid="3a830671-50ce-11e1-b60c-0022693c90c0"/>
            </LINK>
            <COMP relation="Descriptor">
              <OBJECT>
                <ID name="" mc="Infrastructure.Note" uid="36bda486-6bf6-4285-b748-51cd67ee1f34"/>
                <ATTRIBUTES>
                  <ATT name="Content"><![CDATA[Generate the abstract visitor and the visitor interface.]]></ATT>
                  <ATT name="MimeType"></ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">0</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Model">
                    <FOREIGNID name="description" mc="Infrastructure.NoteType" uid="00000000-0000-3e81-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="Note" mc="Infrastructure.Note" uid="180a9235-98fd-4286-8714-5fc9d1100c5f"/>
                <ATTRIBUTES>
                  <ATT name="Content"><![CDATA[#!Py
#
# -------------------------------------------------------------------------------------
#
# Version: 1.1
# Date:    24/10/2011 16h20
# Author:  Copyright (c) Modeliosoft 2009-2010. All rights reserved.
#
# Valid for: Collaboration.
#
# -------------------------------------------------------------------------------------
# This macro pattern generates the visitor interface and abstract(default) visitor class
# in the imported elements.
#
# Les variables suivantes sont accessibles:
# - IModelingSession modelingSession : la session ouverte
# - Collection<ObElement> selectedElements : la liste des éléments sélectionnés
# - ISelection selection: la selection Eclipse
# 
# modelingSession.getModel().getRoot() donne accés au package racine.
#
import sys
sys.setClassLoader (CLASSLOADER)

sys.add_package("com.modeliosoft.modelio.api")
sys.add_package("com.modeliosoft.modelio.api.model")
sys.add_package("com.modeliosoft.modelio.api.model.utils")
sys.add_package("com.modeliosoft.modelio.api.mda.diagram")
sys.add_package("com.modeliosoft.modelio.api.mda.app")
sys.add_package("com.modeliosoft.modelio.api.mda.model")

sys.add_package("com.modeliosoft.subversion.api")

from com.modeliosoft.modelio.api.model.uml.statik import IPackage
from com.modeliosoft.modelio.api.model.uml.statik import IClass
#from com.modeliosoft.modelio.api.model import ObUtils

from datetime import *

# -------------------------------------------------------------

def findByName(l, name):
    for o in l:
        if o.getName()==name:
            return o
    return None


global addAllClasses
def addAllClasses(n, L):
    for c in n.getOwnedElement():
        if (isinstance (c, IClass)):
            L.append(c)
        addAllClasses(c, L)

global getSymbol
def getSymbol (n):
    parent = n.getOwner()
    if (parent == None):
        return n.getName()
    else:
        return getSymbol(parent)+"."+n.getName()

def doesImport (user, imported):
    for i1 in user.getOwnedImport():
        if i1.getImportedElement() == imported:
            return True
    return False
    

# ---------------------------------------------------------------------------
# Main
# ---------------------------------------------------------------------------
toDelete = []

thisCollab = selectedElements[0]
root = thisCollab
ownerPackage = root.getOwner()

umlVisitorInterfaceName = findByName(root.getDeclared(), "VisitorInterface").getValue()
abstractVisitorName = findByName(root.getDeclared(), "AbstractVisitorClass").getValue()
#search the semkernel visitor
semkernelVisitor = findByName(root.getDeclared(), "SmVisitorInterface").getBase()

print "Begin on " + datetime.now().strftime("%c")

# Find or create the UML Visitor interface
# -----------------------------------------------
imm = findByName(ownerPackage.getOwnedElement(IGeneralClass), umlVisitorInterfaceName)
if imm != None:
    print "Visitor interface = " + getSymbol(imm)
    for i in imm.getPart(): 
        toDelete.append(i)
    if not imm.isAbstract():
        imm.setAbstract(True)
else:
    imm = modelingSession.getModel().createInterface(umlVisitorInterfaceName, ownerPackage)
    imm.setAbstract(True)
    ObUtils.putTagValues(modelingSession, imm, "internal", null)
    print "+ Created visitor interface : " + getSymbol(imm) 
    
# Find or create the UML Visitor default class    
# -----------------------------------------------

abstractImm = findByName(ownerPackage.getOwnedElement(IGeneralClass), abstractVisitorName)
if abstractImm != None:
    print "Abstract visitor = " + getSymbol(abstractImm)
    for i in abstractImm.getPart():
        toDelete.append(i)
    #if not abstractImm.isAbstract():
    #    abstractImm.setAbstract(True)
else:
    abstractImm = modelingSession.getModel().createClass(umlVisitorInterfaceName, ownerPackage)
    #abstractImm.setAbstract(True)
    ObUtils.putTagValues(modelingSession, imm, "internal", null)
    print "+ Created Abstract visitor : " + getSymbol(imm) 
    
    # create a realization to the interface
    realization = modelingSession.getModel().createInterfaceRealization(abstractImm, imm)

# Get the classes to generate
toGenerate = []
for i1 in root.getOwnedPackageImport():
    addAllClasses(i1.getImportedPackage(), toGenerate)

for i1 in root.getOwnedImport():
    if isinstance(i1.getImportedElement(), IClass):
        toGenerate.append(i1.getImportedElement())

for visitedClass in toGenerate:
    visitedClassName = visitedClass.getName()
    if ( visitedClassName != umlVisitorInterfaceName  
         and visitedClassName != abstractVisitorName 
         and visitedClass.isStereotyped("Cxx.Semantic") 
         and not ObUtils.isTagged (visitedClass, "internal") 
         and not ObUtils.isTagged (visitedClass, "Cxx.NoCode") 
         and not ObUtils.isTagged (visitedClass, "nocodeForAll") ) :
         
        # 0) delete all existing "visitXxxxx" operations
        # ---------------------------------------------------------------------
        visitedClassModifiable = modelingSession.getElementStatus(visitedClass).isModifiable() 
        if (visitedClassModifiable):
            for i1 in visitedClass.getPart(IOperation):
                if i1.getName() == "accept":
                    toDelete.append(i1)
                    
        # 0b) create element import to uml visitor
        if( not doesImport(visitedClass, imm)) :
            if visitedClassModifiable:
                modelingSession.getModel().createElementImport(visitedClass, imm)
            else:
                print "error: cannot create use from read only  '"+ visitedClassName+ "' to '", imm.getName(), "'."
                exit
             
        # 1) create "VisitorInterface::visitXxxx( theXxxx: Xxxx)" method
        # ------------------------------------------
        visitOpName = "visit" + visitedClassName
        
        operation   = findByName(imm.getPart(IOperation), visitOpName)
        
        if operation == None:
            operation = modelingSession.getModel().createOperation()
            operation.setAbstract (True)
            operation.setName(visitOpName)
            operation.setOwner(imm)
            ObUtils.putTagValues(modelingSession, operation, "Cxx.Specifier", ["virtual"])
            print "  + Created "+ getSymbol(operation);
        else:
            for i1 in operation.getIO() :
                modelingSession.getModel().deleteElement(i1)
            if operation.getReturn() != None :
                modelingSession.getModel().deleteElement(operation.getReturn)
            toDelete.remove (operation)
            
        # Ajout du paramètre de type de la classe
        parameter = modelingSession.getModel().createParameter()
        parameter.setName("the" + visitedClassName)
        parameter.setMultiplicityMin("1")
        parameter.setMultiplicityMax("1")
        parameter.setParameterPassing(ObPassingModeEnum.INOUT)
        parameter.setType(visitedClass)
        ObUtils.putTagValues(modelingSession, parameter, "Cxx.Pointer", ["&"])
        operation.addIO (parameter); 

        # 2) create method on the abstract default implementation
        # "AbstractVisitor::visitXxxx( theXxxx: Xxxx)"
        # -------------------------------------------------------
        operation   = findByName(abstractImm.getPart(IOperation), visitOpName)
        
        if operation == None:
            operation = modelingSession.getModel().createOperation()
            operation.setAbstract (False)
            operation.setName(visitOpName)
            operation.setOwner(abstractImm)
            ObUtils.putTagValues(modelingSession, operation, "Cxx.Specifier", ["virtual"])
            print "  + Created "+ getSymbol(operation);
        else:
            for i1 in operation.getIO() :
                modelingSession.getModel().deleteElement(i1)
            
            for i1 in operation.getDescriptor() :
                modelingSession.getModel().deleteElement(i1)
            
            for i1 in operation.getTag() :
                modelingSession.getModel().deleteElement(i1)
            
            if operation.getReturn() != None :
                modelingSession.getModel().deleteElement(operation.getReturn)
            
            toDelete.remove (operation)
            
        # Ajout du paramètre de type de la classe
        parameter = modelingSession.getModel().createParameter()
        parameter.setName("the" + visitedClassName)
        parameter.setMultiplicityMin("1")
        parameter.setMultiplicityMax("1")
        parameter.setParameterPassing(ObPassingModeEnum.INOUT)
        parameter.setType(visitedClass)
        ObUtils.putTagValues(modelingSession, parameter, "Cxx.Pointer", ["&"])
        operation.addIO (parameter); 

        ObUtils.putNoteContent(modelingSession, operation, "Cxx.Code", "\treturn;")
        ObUtils.putTagValues(modelingSession, operation, "Cxx.Specifier", ["virtual"])
        
        
        # 3) add the accept method and its implementation on each class
        # "Xxxx::accept (SmVisitor& v)"
        # -------------------------------------------------------------
    
        jcode = (umlVisitorInterfaceName + 
                      " * lvisitor = (dynamic_cast <" +
                      umlVisitorInterfaceName + "*> (&v));\n" +
                      "if (lvisitor!=0)\n" +
                      "    lvisitor->visit" + visitedClassName + " ((" + visitedClassName + "&) *this);\n" )
    
        opName    = "accept"; 
        operation = findByName(visitedClass.getPart(IOperation), opName)
        
        if operation is None:
            if visitedClassModifiable:
                operation = modelingSession.getModel().createOperation()
                operation.setAbstract (False)
                operation.setName(opName)
                operation.setOwner(visitedClass)
                ObUtils.putTagValues(modelingSession, operation, "internal", [])
                ObUtils.putNoteContent(modelingSession, operation, "Cxx.Code", jcode)
                print "  + Created ", getSymbol(operation)
            else:
                print ("error: cannot create 'accept(...)' operation on read only  '" + visitedClassName + "'  class.\n" )
        else: 
            if operation in toDelete:
                toDelete.remove (operation) 

        # Ajout du paramètre de type de la classe
        if operation.getIO().size() != 1:
            if not visitedClassModifiable:
                print ("error: cannot correct parameters on read only  '" + getSymbol(operation) +  "'  operation.\n" )
                exit
            
            for i1 in operation.getIO():
                modelingSession.getModel().deleteElement(i1)
                
        
            parameter = modelingSession.getModel().createParameter()
            parameter.setName("v")
            parameter.setMultiplicityMin("1")
            parameter.setMultiplicityMax("1")
            parameter.setParameterPassing(ObPassingModeEnum.INOUT)
            parameter.setType(semkernelVisitor)
            ObUtils.putTagValues(modelingSession, parameter, "Cxx.Pointer", ["&"])
            operation.addIO (parameter); 
    
        # set {virtual} tag
        tagParams = []
        tagParams = ObUtils.getTagValues(operation, "Cxx.Specifier")
        
        if tagParams is None or not "virtual" in tagParams:
            if not visitedClassModifiable:
                print "error: cannot add {Cxx.Specifier(virtual)} on read only  '" + visitedClassName +  "'  class."
                exit
                
            ObUtils.putTagValues(modelingSession, operation, "Cxx.Specifier", ["virtual"])
        
        # set C++ code
        for note in operation.getDescriptor():
            if note.getModel().getName() == "Cxx.Code":
                if note.getContent() != jcode:
                    if not visitedClassModifiable:
                        print "error: cannot modify C++ note on read only  '" + getSymbol(operation) +  "'  operation."
                    else:
                        note.setContent(jcode)
                    
for i in toDelete:
    print "- deleting old '" + getSymbol(i) 
    modelingSession.getModel().deleteElement(i)
        
print "Ended on " + datetime.now().strftime("%c")                



]]></ATT>
                  <ATT name="MimeType"></ATT>
                  <ATT name="Name"><![CDATA[Note]]></ATT>
                  <ATT name="status">0</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Model">
                    <FOREIGNID name="comment" mc="Infrastructure.NoteType" uid="00000000-0000-3e80-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
            </COMP>
          </DEPENDENCIES>
        </OBJECT>
      </COMP>
    </DEPENDENCIES>
  </OBJECT>
</EXT>